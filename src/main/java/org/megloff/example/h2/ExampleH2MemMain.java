package org.megloff.example.h2;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

public class ExampleH2MemMain {

    // before you run this example make sure you started the H2 server
    // i.e. java -cp ./h2/bin/h2-1.4.199.jar org.h2.tools.Server -ifNotExists

    // in case of the memory DB, log first manually in into the web console with the same JDBC url and same credentials
    // this will ensure that the memory DB will stay when his application ends
    // http://127.0.1.1:8885/login.do
    // jdbc:h2:tcp://localhost:9092/mem:cars
    // with user: sa
    // and pwd: secret

    public static void main(String[] args) throws Exception {

        // initialize a logger
        LogManager.getLogManager().readConfiguration(ExampleH2MemMain.class.getResourceAsStream("/logger.properties"));
        Logger log = Logger.getLogger(ExampleH2FileMain.class.getName());

        // Declare objects
        Connection con = null;
        Statement stm = null;
        ResultSet rs = null;

        try {

            // H2 specific JDBC connnection string, the path after the port tells where the DB file has to be stored
            // here it will be in the current directory where the H2 DB server has been started

            String url = "jdbc:h2:tcp://localhost:9092/mem:cars";
            String user = "sa";
            String password = "secret";

            // create connection to DB, for H2 this will create the DB in case it does not exist and
            // if you started the server with the parameter '-ifNotExists', see "start-h2-server.sh"
            // The JDBC framework automatically detects the suitable driver class on the classpath based
            // on the passed url
            con = DriverManager.getConnection(url, user, password);
            // get a stateemtn object which allows us to execute SQL statements
            stm = con.createStatement();
            // create the table if not exist
            // stm.execute("drop table if exists CARS");
            stm.execute(
                    "create table if not exists CAR ("
                            + "id bigint generated by default as identity,"
                            + "model varchar(100) not null,"
                            + "manufacturer varchar(100) not null,"
                            + "primary key (id))");

            // check if table is empty
            int count = 0;
            rs = stm.executeQuery("select count(*)from CAR");
            if (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            log.info("we have " + count + " entries in table CAR...");
            if (count == 0) {
                // insert a few records
                log.info("while we have nothing we insert 3 models...");
                stm.execute("insert into CAR (\"MODEL\", \"MANUFACTURER\") values ('M135i xDrive', 'BMW')");
                stm.execute("insert into CAR (\"MODEL\",  \"MANUFACTURER\") values ('308 SW','Peugot')");
                stm.execute("insert into CAR (\"MODEL\",  \"MANUFACTURER\") values ('812','Ferrari')");
            }
            // do a simple query of the CAR table and print the results
            log.info("query the DB for cars...");
            rs = stm.executeQuery("select id, model, manufacturer from CAR");
            while (rs.next()) {
                Long id = rs.getLong("id");
                String model = rs.getString("model");
                String manufacturer = rs.getString("manufacturer");
                log.info("Car id:" + id + ", model:" + model + ", manufacturer:" + manufacturer);
            }
            log.info("Finished...");
        } catch (SQLException ex) {
            log.log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            // close all resources
            // in case of the memory DB, the last active connection will destroy the DB
            // in case you like to keep the DB alive in memory please keep the web console open and stay logged in
            if (rs != null) rs.close();
            if (stm != null) stm.close();
            if (con != null) con.close();
        }
    }
}
